# ---------- src/Makevars.win (CPU-only; enumerate objs + explicit link) ----------

# Handy debug in CI
$(info >>> Using Makevars.win)
$(info >>> CC=$(CC))
$(info >>> CXX=$(CXX))

# Preprocessor / flags (CPU-only, generic ISA)
PKG_CPPFLAGS = -I. -I./ggml-cpu \
  -DGGML_VERSION=\"local\" -DGGML_COMMIT=\"local\" \
  -DGGML_USE_CPU -DGGML_CPU_GENERIC -DGGML_USE_K_QUANTS

PKG_CFLAGS   = -O3 -DNDEBUG -Wall -Wextra -Wno-unused-function
PKG_CXXFLAGS = -O3 -DNDEBUG -std=gnu++17 -Wall -Wextra -Wno-unused-function
PKG_LIBS     = -lm

# IMPORTANT: single line; no trailing spaces
OBJECTS = ggml.o ggml-alloc.o ggml-backend.o ggml-threading.o ggml-quants.o quants.o ggml-cpu.o \
          gguf.o unicode.o unicode-data.o vec.o binary-ops.o unary-ops.o ops.o traits.o hbm.o repack.o \
          llama.o llama-arch.o llama-batch.o llama-chat.o llama-context.o llama-cparams.o \
          llama-grammar.o llama-graph.o llama-hparams.o llama-impl.o llama-io.o \
          llama-kv-cache.o llama-kv-cache-iswa.o llama-memory.o llama-memory-hybrid.o llama-memory-recurrent.o \
          llama-mmap.o llama-model.o llama-model-loader.o llama-model-saver.o llama-quant.o \
          llama-sampling.o llama-vocab.o llama-adapter.o ggml-opt.o \
          interface.o

# Print them so we can verify it's not empty
$(info >>> OBJECTS=$(OBJECTS))
$(info >>> SHLIB=$(SHLIB))

# Pattern rules (use ALL_* so PKG_* propagate)
%.o: %.c
	$(CC)  $(ALL_CFLAGS)   $(ALL_CPPFLAGS) -c $< -o $@

%.o: %.cpp
	$(CXX) $(ALL_CXXFLAGS) $(ALL_CPPFLAGS) -c $< -o $@

# Explicit link step â€“ this *forces* make to build the objects, then link
# (This will emit a harmless "overriding recipe" warning; that's okay.)
all: $(SHLIB)

$(SHLIB): $(OBJECTS)
	$(SHLIB_LINK) -o $@ $(OBJECTS) $(PKG_LIBS)

clean:
	-del *.o *.dll 2>nul || rm -f *.o *.dll
