# ---------- src/Makevars.win (CPU-only: build static lib first, then let R link) ----------

$(info >>> Using Makevars.win)
$(info >>> CC=$(CC))
$(info >>> CXX=$(CXX))

PKG_CPPFLAGS = -I. -I./ggml-cpu \
  -DGGML_VERSION=\"local\" -DGGML_COMMIT=\"local\" \
  -DGGML_USE_CPU -DGGML_CPU_GENERIC -DGGML_USE_K_QUANTS

PKG_CFLAGS   = -O3 -DNDEBUG -Wall -Wextra -Wno-unused-function
PKG_CXXFLAGS = -O3 -DNDEBUG -std=gnu++17 -Wall -Wextra -Wno-unused-function

# we’ll link against our static library + libm
PKG_LIBS = $(PKG_LIBS) libllama.a -lm

# R’s make uses OBJECTS when linking the DLL
OBJECTS = cpu_shim.o interface.o

# Build this static library from all ggml/llama .c/.cpp sources
LIBNAME  = libllama.a
# (single line; no trailing spaces)
LIBOBJS = ggml.o ggml-alloc.o ggml-backend.o ggml-threading.o ggml-quants.o quants.o \
          ggml-cpu.o ggml-cpu-xx.o \
          gguf.o unicode.o unicode-data.o vec.o binary-ops.o unary-ops.o ops.o traits.o hbm.o repack.o \
          llama.o llama-arch.o llama-batch.o llama-chat.o llama-context.o llama-cparams.o \
          llama-grammar.o llama-graph.o llama-hparams.o llama-impl.o llama-io.o \
          llama-kv-cache.o llama-kv-cache-iswa.o llama-memory.o llama-memory-hybrid.o llama-memory-recurrent.o \
          llama-mmap.o llama-model.o llama-model-loader.o llama-model-saver.o llama-quant.o \
          llama-sampling.o llama-vocab.o llama-adapter.o ggml-opt.o

# Ensure the static lib exists BEFORE R’s default 'shlib' link step runs
shlib: $(LIBNAME)

# Pattern rules (use ALL_* so PKG_* flags propagate)
%.o: %.c
	$(CC)  $(ALL_CFLAGS)   $(ALL_CPPFLAGS) -c $< -o $@

%.o: %.cpp
	$(CXX) $(ALL_CXXFLAGS) $(ALL_CPPFLAGS) -c $< -o $@

# Avoid name clash: compile ggml-cpu.cpp to a unique object name
ggml-cpu-xx.o: ggml-cpu.cpp
	$(CXX) $(ALL_CXXFLAGS) $(ALL_CPPFLAGS) -c $< -o $@

# Build the static library
$(LIBNAME): $(LIBOBJS)
	$(AR) rcs $@ $(LIBOBJS)

clean:
	-del *.o *.a *.dll 2>nul || rm -f *.o *.a *.dll
