# ---------- src/Makevars.win (CPU-only, llama.cpp minimal) ----------

# CI debug (optional)
$(info >>> Using Makevars.win)
$(info >>> CC=$(CC))
$(info >>> CXX=$(CXX))

PKG_CPPFLAGS = -I. -I./ggml-cpu \
  -DGGML_VERSION=\"local\" -DGGML_COMMIT=\"local\" \
  -DGGML_USE_CPU -DGGML_CPU_GENERIC -DGGML_USE_K_QUANTS

PKG_CFLAGS   = -O3 -DNDEBUG -Wall -Wextra -Wno-unused-function
PKG_CXXFLAGS = -O3 -DNDEBUG -std=gnu++17 -Wall -Wextra -Wno-unused-function
PKG_LIBS     = -lm

# Keep on ONE line (no trailing spaces)
OBJECTS = \
  ggml.o ggml-alloc.o ggml-backend.o ggml-threading.o \
  ggml-cpu.o ggml-cpu-xx.o ggml-quants.o quants.o \
  gguf.o unicode.o unicode-data.o vec.o binary-ops.o unary-ops.o ops.o traits.o hbm.o repack.o \
  llama.o llama-arch.o llama-batch.o llama-chat.o llama-context.o llama-cparams.o \
  llama-grammar.o llama-graph.o llama-hparams.o llama-impl.o llama-io.o \
  llama-kv-cache.o llama-kv-cache-iswa.o llama-memory.o llama-memory-hybrid.o llama-memory-recurrent.o \
  llama-mmap.o llama-model.o llama-model-loader.o llama-model-saver.o llama-quant.o \
  llama-sampling.o llama-vocab.o llama-adapter.o \
  ggml-opt.o \
  cpu_shim.o interface.o

# Compile rules â€“ use ALL_* so PKG_* flags propagate
%.o: %.c
	$(CC)  $(ALL_CFLAGS)   $(ALL_CPPFLAGS) -c $< -o $@

%.o: %.cpp
	$(CXX) $(ALL_CXXFLAGS) $(ALL_CPPFLAGS) -c $< -o $@

# Avoid name clash: compile ggml-cpu.cpp to a different object name
ggml-cpu-xx.o: ggml-cpu.cpp
	$(CXX) $(ALL_CXXFLAGS) $(ALL_CPPFLAGS) -c $< -o $@

clean:
	-del *.o *.dll 2>nul || rm -f *.o *.dll
