# ---------- src/Makevars.win (CPU-only, build static lib + let R link) ----------
$(info >>> Using Makevars.win)
$(info >>> CC=$(CC))
$(info >>> CXX=$(CXX))

# Make ggml.c see version macros on every compile
PKG_CPPFLAGS = -I. -I./ggml-cpu -include ggml-version.h \
  -DGGML_USE_CPU -DGGML_CPU_GENERIC -DGGML_USE_K_QUANTS

PKG_CFLAGS   = -O3 -DNDEBUG -Wall -Wextra -Wno-unused-function
PKG_CXXFLAGS = -O3 -DNDEBUG -std=gnu++17 -Wall -Wextra -Wno-unused-function

# IMPORTANT: link the static lib via PKG_LIBS (no custom $(SHLIB) recipe!)
PKG_LIBS = $(LIBNAME) -lm

# ---- sources to go into the static library (no ggml-opt.cpp) ----
CORE_C = \
  ggml.c ggml-alloc.c ggml-quants.c quants.c ggml-cpu.c

CORE_CPP = \
  ggml-backend.cpp ggml-threading.cpp \
  gguf.cpp unicode.cpp unicode-data.cpp vec.cpp \
  binary-ops.cpp unary-ops.cpp ops.cpp traits.cpp hbm.cpp repack.cpp \
  llama.cpp llama-arch.cpp llama-batch.cpp llama-chat.cpp llama-context.cpp llama-cparams.cpp \
  llama-grammar.cpp llama-graph.cpp llama-hparams.cpp llama-impl.cpp llama-io.cpp \
  llama-kv-cache.cpp llama-kv-cache-iswa.cpp llama-memory.cpp \
  llama-memory-hybrid.cpp llama-memory-recurrent.cpp \
  llama-mmap.cpp llama-model.cpp llama-model-loader.cpp llama-model-saver.cpp \
  llama-quant.cpp llama-sampling.cpp llama-vocab.cpp llama-adapter.cpp

LIBOBJS = $(CORE_C:.c=.o) $(CORE_CPP:.cpp=.o)
LIBNAME = libllama.a

# ---- package-facing objects that R should link into the DLL ----
OBJECTS = interface.o cpu_shim.o

$(info >>> LIBOBJS=$(LIBOBJS))
$(info >>> OBJECTS=$(OBJECTS))
$(info >>> SHLIB=$(SHLIB))

# ---- compile rules (use ALL_* so PKG_* flags propagate) ----
%.o: %.c
	$(CC)  $(ALL_CFLAGS)   $(ALL_CPPFLAGS) -c $< -o $@

%.o: %.cpp
	$(CXX) $(ALL_CXXFLAGS) $(ALL_CPPFLAGS) -c $< -o $@

# Build the static library with all ggml/llama objects
$(LIBNAME): $(LIBOBJS)
	$(AR) rcs $@ $(LIBOBJS)

# Tell R's default linker rule that the DLL also depends on our static lib
# (This adds a prerequisite only; we DO NOT override the $(SHLIB) recipe.)
$(SHLIB): $(LIBNAME)

# Default target
all: $(SHLIB)

clean:
	-del *.o *.a *.dll 2>nul || rm -f *.o *.a *.dll
