# ---------- src/Makevars.win (Modern llama.cpp CPU-only build) ----------
.DEFAULT_GOAL := all
.PHONY: all clean

$(info >>> Using Makevars.win)
$(info >>> CC=$(CC))
$(info >>> CXX=$(CXX))

# ------------------------------------------------------------
# Compiler / linker configuration
# ------------------------------------------------------------
CXX_STD = CXX17
SHLIB_LD = $(CXX)

PKG_CPPFLAGS = -I. -I./ggml-cpu -include ggml-version.h \
  -DGGML_USE_CPU -DGGML_CPU_GENERIC -DGGML_USE_K_QUANTS \
  -DGGML_VERSION=\"local\" -DGGML_COMMIT=\"local\"

PKG_CFLAGS   = -O3 -DNDEBUG -pthread -Wall -Wextra -Wno-unused-function
PKG_CXXFLAGS = -O3 -DNDEBUG -pthread -std=gnu++17 -Wall -Wextra -Wno-unused-function
PKG_LIBS     = -lm -pthread
# macOS alternative (optional): uncomment next line
# PKG_LIBS += -framework Accelerate

# ------------------------------------------------------------
# Core sources (modern llama.cpp layout â€” all C++)
# ------------------------------------------------------------
OBJECTS = \
    binary-ops.o \
    ggml-alloc.o \
    ggml-backend.o \
    ggml-cpu.o \
    ggml-opt.o \
    ggml-quants.o \
    ggml-threading.o \
    ggml.o \
    gguf.o \
    hbm.o \
    llama-adapter.o \
    llama-arch.o \
    llama-batch.o \
    llama-chat.o \
    llama-context.o \
    llama-cparams.o \
    llama-grammar.o \
    llama-graph.o \
    llama-hparams.o \
    llama-impl.o \
    llama-io.o \
    llama-kv-cache-iswa.o \
    llama-kv-cache.o \
    llama-memory-hybrid.o \
    llama-memory-recurrent.o \
    llama-memory.o \
    llama-mmap.o \
    llama-model-loader.o \
    llama-model-saver.o \
    llama-model.o \
    llama-quant.o \
    llama-sampling.o \
    llama-vocab.o \
    llama.o \
    cpu_shim.o \
    ops.o \
    repack.o \
    traits.o \
    unary-ops.o \
    unicode-data.o \
    unicode.o \
    vec.o \
    interface.o \
    quants.o

# ------------------------------------------------------------
# Compilation rules
# ------------------------------------------------------------
%.o: %.c
	$(CC) $(ALL_CPPFLAGS) $(ALL_CFLAGS) -c $< -o $@

%.o: %.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -c $< -o $@

# ------------------------------------------------------------
# Build target
# ------------------------------------------------------------
all: $(SHLIB)

clean:
	-del *.o *.a *.dll 2>nul || rm -f *.o *.a *.dll
